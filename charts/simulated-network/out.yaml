---
# Source: simulated-network/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: network-config
data:
  
  graphivz.dot:  |
   graph G {
     3 -- 4;
     2 -- 1;
     4 -- 1;
     4 -- 2;
     3 -- 2;
     1 -- 3;
   }
  node_list:  |
   1 node1:8888
   2 node2:8888
   3 node4:8888
   4 node4:8888
---
# Source: simulated-network/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: node2
  labels:
    helm.sh/chart: simulated-network-0.3.0
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http-node2
      protocol: TCP
      name: http
    - port: 8888
      target: tcp-node2
      name: tcp
  selector:
    app.kubernetes.io/instance: test
---
# Source: simulated-network/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: node1
  labels:
    helm.sh/chart: simulated-network-0.3.0
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http-node1
      protocol: TCP
      name: http
    - port: 8888
      target: tcp-node1
      name: tcp
  selector:
    app.kubernetes.io/instance: test
---
# Source: simulated-network/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node2
  labels:
    helm.sh/chart: simulated-network-0.3.0
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: test
      app.kubernetes.io/name: node2
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: test
        app.kubernetes.io/name: node2
    spec:
      imagePullSecrets:
        - name: image-pull-secret
      securityContext:
        null
      containers:
        - name: node2
          securityContext:
            null
          image: "ubuntu:latest"
          imagePullPolicy: Always
          command: 
          
            - /bin/bash
            - -c
            - --
          args:
            - "-c"
            - "python -u node.py -id 1 -g  /etc/config/graphviz.dot -p /etc/config/node_list -t 9999" 
          env:
            - name: "POSTGRES_HOST"
              value: "postgres-host"
          ports:
            - name: http-node2
              containerPort: 8080
              protocol: TCP
            - name: tcp-node2
              containerPort: 8888
              protocol: TCP
          livenessProbe: 
            
            initialDelaySeconds: 15
            periodSeconds: 10
            tcpSocket:
              port: 8888
          readinessProbe:
            
            null
          resources:
            {}
          volumeMounts:
          - name: configmap-volume
            mountPath: /etc/config
      volumes:     
      - name: configmap-volume
        configMap:
          name: network-config
---
# Source: simulated-network/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node1
  labels:
    helm.sh/chart: simulated-network-0.3.0
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: test
      app.kubernetes.io/name: node1
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: test
        app.kubernetes.io/name: node1
    spec:
      imagePullSecrets:
        - name: image-pull-secret
      securityContext:
        null
      containers:
        - name: node1
          securityContext:
            null
          image: "ubuntu:latest"
          imagePullPolicy: Always
          command: 
          
            - /bin/bash
            - -c
            - --
          args:
            - "while true; do sleep 30; done;" 
          env:
          ports:
            - name: http-node1
              containerPort: 8080
              protocol: TCP
            - name: tcp-node1
              containerPort: 8888
              protocol: TCP
          livenessProbe: 
            
            initialDelaySeconds: 15
            periodSeconds: 10
            tcpSocket:
              port: 8888
          readinessProbe:
            
            null
          resources:
            {}
          volumeMounts:
          - name: configmap-volume
            mountPath: /etc/config
      volumes:     
      - name: configmap-volume
        configMap:
          name: network-config
